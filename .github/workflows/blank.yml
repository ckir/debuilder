# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  schedule: 
    - cron: '0 0 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  nodejs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Get NodeJS latest available version
        id: env-setup
        run: |
          sudo apt-get -y -qq install html2text > /dev/null
          version=$(curl -sL https://nodejs.org/download/release/latest/ | grep linux-x64.tar.gz | html2text | grep -oP 'node-v\K[0-9]+\.[0-9]+\.[0-9]+' | sed 's/-.*//')
          # Check if version is in semantic versioning format
          if echo "$version" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "NodeJS latest available version found is: $version"
            echo "nodejs_latest=$version" >> $GITHUB_OUTPUT
          else
            echo "Version [$version] is not in semantic versioning format"
            exit 1
          fi

      - name: Build if package not exists
        run: |
          latest_version=${{ steps.env-setup.outputs.nodejs_latest }}
          package_name="nodejs_$latest_version-1_i386.deb"
          http_code=$(curl -s -o /dev/null -w "%{http_code}" https://ckir-debuilds.s3.eu-west-2.amazonaws.com/nodejs/$package_name)
          if [ $http_code == "200" ]; then
            echo "$package_name already exists. Build aborted"
            exit 0
          fi
          docker build -t image_nodejs $GITHUB_WORKSPACE/builders/nodejs
          docker run -e AWS_REGION=${{ secrets.AWS_REGION }} -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} image_nodejs /opt/src/scripts/setup.sh

  python:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Get Python's latest available version
        id: env-setup
        run: |
          version=$(wget -qO- https://www.python.org | grep -oE 'Latest: .*[0-9]+\.[0-9]+\.[0-9]+' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          # Check if version is in semantic versioning format
          if echo "$version" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Python's latest available version found is: $version"
            echo "python_latest=$version" >> $GITHUB_OUTPUT
          else
            echo "Python version [$version] is not in semantic versioning format"
            exit 1
          fi

      - name: Build if package not exists
        run: |
          latest_version=${{ steps.env-setup.outputs.python_latest }}
          package_name="python_$latest_version-1_i386.deb"
          http_code=$(curl -s -o /dev/null -w "%{http_code}" https://ckir-debuilds.s3.eu-west-2.amazonaws.com/python/$package_name)
          if [ $http_code == "200" ]; then
            echo "$package_name already exists. Build aborted"
            exit 0
          fi
          docker build -t image_python $GITHUB_WORKSPACE/builders/python
          docker run -e AWS_REGION=${{ secrets.AWS_REGION }} -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} image_python /opt/src/scripts/setup.sh          